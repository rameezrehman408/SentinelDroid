package com.example.AUAntiMalware;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetFileDescriptor;
import android.os.Bundle;
import android.os.Parcelable;
import android.util.Log;
import android.widget.ImageView;
import android.widget.TextView;

import org.tensorflow.lite.Interpreter;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Arrays;

public class MalwareModelActivity extends AppCompatActivity {
    Interpreter tflite_RF;
    Interpreter tflite_all;
    PackageManager packageManager;
    private static final String DEBUG_TAG = "MalwareModelActivity";
    TextView outputText_RF;
    TextView outputText_all;
    TextView appName;
    ArrayList<Parcelable> imageView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_malware_model);
        Log.d(DEBUG_TAG, "On Create: started.");
        outputText_RF = (TextView) findViewById(R.id.tv);
        outputText_all = (TextView) findViewById(R.id.tv2);
        appName = (TextView) findViewById(R.id.appName);
        Intent intent = getIntent();

        //imageView = intent.getExtras().getParcelableArrayList("appLogo");
        //imageView = getIntent().get//getParcelableExtra("appLogo");
        //ImageView imageView2 = (ImageView) findViewById(R.id.applogo);
        //imageView2.(imageView);


        ArrayList<ApplicationInfo> installedApps = intent.getExtras().getParcelableArrayList("InstalledApps");
        String appNames = intent.getExtras().getString("appName");

        float[] received_arr_RF = intent.getExtras().getFloatArray("array_RF");
        float[] received_arr_all = intent.getExtras().getFloatArray("array_all");


        //Log.d(DEBUG_TAG, "clicked on: " + installedApps.get(position));
        Log.d(DEBUG_TAG, "App Name is: " + appNames);
        appName.setText(appNames);


        try {
            Log.d(DEBUG_TAG, "going to load Reduced Features model...");
            tflite_RF = new Interpreter(loadModelFile_RF());
            Log.d(DEBUG_TAG, "Reduced Features Model is loaded!!!");
        } catch (Exception ex) {
            Log.d(DEBUG_TAG, "Reduced Features Model is NOT loaded!!!");
            ex.printStackTrace();
        }


        float[][][] received_array_RF = new float[1][1071][1];
        for(int i=0; i<1071; i++){
            received_array_RF[0][i][0] = received_arr_RF [i];
            if (received_arr_RF[i] > 0){
                Log.d(DEBUG_TAG, "Input Tensor: Index[" + i + "] contains: " + received_arr_RF[i]);
            }
        }

        float output_RF = doInference_RF(received_array_RF);
        Log.d(DEBUG_TAG, "Predicted Value (for RF) is:" + output_RF);

        //closing the interpreter.



        //running for all features.
        try {
            Log.d(DEBUG_TAG, "going to load all Features model...");
            tflite_all = new Interpreter(loadModelFile_all());
            Log.d(DEBUG_TAG, "All Features Model is loaded!!!");
        } catch (Exception ex) {
            Log.d(DEBUG_TAG, "All Features Model is NOT loaded!!!");
            ex.printStackTrace();
        }


        float[][][] received_array_all = new float[1][8111][1];
        for(int i=0; i<8111; i++){
            received_array_all[0][i][0] = received_arr_all [i];
            if (received_arr_all[i] > 0){
                Log.d(DEBUG_TAG, "Input Tensor(all): Index[" + i + "] contains: " + received_arr_all[i]);
            }
        }

        Log.d(DEBUG_TAG, "Input Tensor(all) Dimensions:" + received_arr_all.length);
        float output_all = doInference_all(received_array_all);
        //float output_all = doInference_all(received_arr_all);
        Log.d(DEBUG_TAG, "Predicted Value (all feat) is:" + output_all);

        //closing the interpreter.
        tflite_all.close();
        tflite_RF.close();

        if(output_all>0){
            outputText_all.setText("All Features: App is Benign. " + "\nCalculated Value is: " + Float.toString(output_all));
        }
        else {
            outputText_all.setText("All Features: App is Malicious. " + "\nCalculated Value is: " + Float.toString(output_all));
        }

        if(output_RF>0){
            outputText_RF.setText("Reduced Features: App is Benign. " + "\nCalculated Value is: " + Float.toString(output_RF));
        }
        else {
            outputText_RF.setText("Reduced Features: App is Malicious. " + "\nCalculated Value is: " + Float.toString(output_RF));
        }
    }


    private float doInference_RF(Object inputValue) { //int[] inputVals, int[] inputLength) {   //for input array.
        //input shape is [1]
        //float[][][] inputVal = new float[1][1071][1];

        //Object[] inputVal = (Object[]) inputValue;
        //inputVal = Malicious_sample5;

        //output shape is [l][l]
        float[][] outputVal = new float[1][1];

        //float[][] parsedOutput0 = new float[1][1];
        //float[][] parsedOutput1 = new float[1][1];
        //Map<Integer, Object> outputValMap = new HashMap<>();
        //outputValMap.put(0, parsedOutput0);

        //run inference passing the input shape and getting the output shape
        tflite_RF.run(inputValue, outputVal);
        //tflite.runForMultipleInputsOutputs(inputVal, outputValMap);

        //Object[] inputs = {input0, input1, ...;
        return outputVal[0][0];
    }

    private float doInference_all(Object inputValue) { //int[] inputVals, int[] inputLength) {
        //input shape is [1]
        //float[][][] inputVal = new float[1][1071][1];

        //Object[] inputVal = (Object[]) inputValue;
        //inputVal = Malicious_sample5;

        //output shape is [l][l]
        float[][] outputVal = new float[1][1];

        //float[][] parsedOutput0 = new float[1][1];
        //float[][] parsedOutput1 = new float[1][1];
        //Map<Integer, Object> outputValMap = new HashMap<>();
        //outputValMap.put(0, parsedOutput0);

        //run inference passing the input shape and getting the output shape
        tflite_all.run(inputValue, outputVal);
        //tflite.runForMultipleInputsOutputs(inputVal, outputValMap);

        //Object[] inputs = {input0, input1, ...;
        return outputVal[0][0];
    }

    private MappedByteBuffer loadModelFile_RF() throws IOException {
        //open the model using input stream and memory map it to load
        AssetFileDescriptor fileDescriptor = this.getAssets().openFd("model_reduced_feat.tflite");
        //AssetFileDescriptor fileDescriptor = this.getAssets().openFd("lin_model.tflite");
        FileInputStream inputStream = new FileInputStream(fileDescriptor.getFileDescriptor());
        FileChannel fileChannel = inputStream.getChannel();
        long startOffset = fileDescriptor.getStartOffset();
        long declaredLength = fileDescriptor.getDeclaredLength();
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
    }

    private MappedByteBuffer loadModelFile_all() throws IOException {
        //open the model using input stream and memory map it to load
        AssetFileDescriptor fileDescriptor = this.getAssets().openFd("model_all_feat.tflite");
        //AssetFileDescriptor fileDescriptor = this.getAssets().openFd("lin_model.tflite");
        FileInputStream inputStream = new FileInputStream(fileDescriptor.getFileDescriptor());
        FileChannel fileChannel = inputStream.getChannel();
        long startOffset = fileDescriptor.getStartOffset();
        long declaredLength = fileDescriptor.getDeclaredLength();
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
    }
}