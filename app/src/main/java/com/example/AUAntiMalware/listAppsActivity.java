package com.example.AUAntiMalware;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.app.ProgressDialog;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetFileDescriptor;
import android.os.Bundle;
import android.util.Log;

import org.tensorflow.lite.Interpreter;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class listAppsActivity extends AppCompatActivity {
    Interpreter tflite;
    private RecyclerView recyclerView;
    private listAdapter listadapter;
    private RecyclerView.Adapter mAdapter;
    private RecyclerView.LayoutManager layoutManager;
    private ProgressDialog mProgressDialog;
    private static final String DEBUG_TAG = "listAppsActivity";

    @Override
    protected void onCreate(Bundle savedInstanceState) {

/*        mProgressDialog = new ProgressDialog(this);
        mProgressDialog.setCancelable(false);
        mProgressDialog.setMessage("Loading...");
        //To show loading message...
        mProgressDialog.show();
        */

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_list_apps);
        recyclerView = (RecyclerView) findViewById(R.id.app_recyclerView);      //can be replaced with "view binding" for better compile time type-safety.


        final PackageManager pm = getPackageManager();
        List<ApplicationInfo> apps = pm.getInstalledApplications(0);
        ArrayList<ApplicationInfo> installedApps = new ArrayList<ApplicationInfo>();

        for (ApplicationInfo app:apps) {
            if((app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0) {
                installedApps.add(app);     //it's a system app, not interested in it.
            }
            if((app.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
                //Discard this one
            }
            else {
                installedApps.add(app);
            }
        }

        //Model is loaded into the Malware Model Activity therefore isn't used here.
        /*        try {
            Log.d(DEBUG_TAG, "going to load model...");
            tflite = new Interpreter(loadModelFile());
            Log.d(DEBUG_TAG, "Model is loaded!!!");
        } catch (Exception ex) {
            Log.d(DEBUG_TAG, "Model is NOT loaded!!!");
            ex.printStackTrace();
        }*/





        Collections.sort(installedApps, new Comparator<ApplicationInfo>() {     //label comparison
            @Override
            public int compare(ApplicationInfo applicationInfo, ApplicationInfo t1) {
                return (applicationInfo.loadLabel(pm).toString()).compareToIgnoreCase(t1.loadLabel(pm).toString());
            }
        });

        listadapter = new listAdapter(installedApps, this, pm);

        //To hide loading message...
        //mProgressDialog.dismiss();
        recyclerView.setAdapter(listadapter);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));

    }


    private MappedByteBuffer loadModelFile() throws IOException {
        //open the model using input stream and memory map it to load
        AssetFileDescriptor fileDescriptor = this.getAssets().openFd("model_reduced_feat.tflite");
        //AssetFileDescriptor fileDescriptor = this.getAssets().openFd("lin_model.tflite");
        FileInputStream inputStream = new FileInputStream(fileDescriptor.getFileDescriptor());
        FileChannel fileChannel = inputStream.getChannel();
        long startOffset = fileDescriptor.getStartOffset();
        long declaredLength = fileDescriptor.getDeclaredLength();
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
    }
}